{
    "openapi": "3.0.0",
    "info": {
        "version": "1.0.0",
        "title": "MERCAVUS API",
        "description": "Documentation for MERCAVUS API"
        
    },
    "tags": [
        {
            "name": "Hobbies",
            "description": "API for hobbies in the system"
        }
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/hobby": {
            "get": {
                "tags": [
                    "Hobbies"
                ],
                "summary": "Get all Hobbies",
                "responses": {
                    "200": {
                        "description": "OK",
                           "schema": {
                            "$ref": "#/definitions/Hobbies"
                        }
                     
                    }
                }
            },
            "post": {
                "tags": [
                    "Hobbies"
                ],
                "summary": "Create a new hobby in system",
                "requestBody": {
                    "description": "Hobby Object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Hobby"
                            }
                        }
                    }
                },
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    },
                    "400": {
                        "description": "Failed. Bad post data."
                    }
                }
            }
        },

        "/user": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all Users",
                "responses": {
                    "200": {
                        "description": "OK",
                           "schema": {
                            "$ref": "#/definitions/Users"
                        }
                     
                    }
                }
            }
        ,
    
    
    
        "post": {
            "tags": [
                "Users"
            ],
            "summary": "Create a new user in system",
            "requestBody": {
                "description": "User Object",
                "required": true,
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            },
            "produces": [
                "application/json"
            ],
            "responses": {
                "200": {
                    "description": "OK",
                    "schema": {
                        "$ref": "#/definitions/id"
                    }
                },
                "400": {
                    "description": "Failed. Bad post data."
                }
            }
        }
    },
       








        "/hobby/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "ID of the hobby that we want to match",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Hobbies"
                ],
                "summary": "Get Hobby with given ID",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Hobby with id",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Hobby"
                        }
                    },
                    "404": {
                        "description": "Failed. Hobby not found."
                    }
                }
            },
            "put": {
                "summary": "Update hobby with given ID",
                "tags": [
                    "Hobbies"
                ],
                "requestBody": {
                    "description": "Hobby Object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/Hobby"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Hobby with new values of properties",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Hobby"
                        }
                    },
                    "400": {
                        "description": "Failed. Bad post data."
                    },
                    "404": {
                        "description": "Failed. Hobby not found."
                    }
                }
            },
            "delete": {
                "summary": "Delete hobby with given ID",
                "tags": [
                    "Hobbies"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Delete hobby with id",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    },
                    "404": {
                        "description": "Failed. Hobby not found."
                    }
                }
            }
        },

  
                  
        "/user/{id}": {
            "parameters": [
                {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "description": "ID of the user that we want to match",
                    "type": "string"
                }
            ],
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get User with given ID",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "User with id",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "Failed. User not found."
                    }
                }
            },
            "put": {
                "summary": "Update user with given ID",
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "description": "User Object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "User with new values of properties",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Failed. Bad post data."
                    },
                    "404": {
                        "description": "Failed. User not found."
                    }
                }
            },
            "delete": {
                "summary": "Delete user with given ID",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "description": "Delete user with id",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/id"
                        }
                    },
                    "404": {
                        "description": "Failed. User not found."
                    }
                }
            }
        
        }




    },


    



    "definitions": {
        "id": {
            "properties": {
                "uuid": {
                    "type": "string"
                }
            }
        },
        "Hobby": {
            "type": "object",
            "properties": {
                
                "name": {
                    "type": "string"
                },
                "passionLevel":{
                    "type": "string",
                     "enum": "[Low, Medium, High, Very-High]",
                     "required": true
                },
                "year": {
                    "type": "boolean"
                },
                "user": {
                    "type": "string",
                    "required":true
                }
            }
        },
        "Hobbies": {
            "type": "object",
            "properties": {
                "cats": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/Hobby"
                    }
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                
                "name": {
                    "type": "string"
                }
               
            }
        },
        "Users": {
            "type": "object",
            "properties": {
                "cats": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        }
    }
}
